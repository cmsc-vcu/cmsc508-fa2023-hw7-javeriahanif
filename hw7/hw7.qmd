---
title: Homework 7 - Creating a resume database
author: Javeria Hanif
date: Nov 7, 2023
format:
    html:
        theme: minty
        toc: true
        embed-resources: true
        code-copy: true
---

This document serves as a practice for creating database, analyzing ER diagrams, writing SQL queries, and practice specific queries.

GITHUB URL: <https://github.com/cmsc-vcu/cmsc508-fa2023-hw7-javeriahanif>

```{python}
#| eval: true
#| echo: false
import os
import sys
import pandas as pd
from tabulate import tabulate
from dotenv import load_dotenv
from sqlalchemy import create_engine, text
from sqlalchemy.exc import OperationalError, ProgrammingError
from IPython.display import display, Markdown
```
```{python}
#| eval: true
#| echo: false

# modify config_map to reflect credentials needed by this program
config_map = {
    'user':'CMSC508_USER',
    'password':'CMSC508_PASSWORD',
    'host':'CMSC508_HOST',
    'database':'HW7_DB_NAME'
}
# load and store credentials
load_dotenv()
config = {}
for key in config_map.keys():
    config[key] = os.getenv(config_map[key])
flag = False
for param in config.keys():
    if config[param] is None:
        flag = True
        print(f"Missing {config_map[param]} in .env file")
#if flag:
#    sys.exit(1)
```
```{python}
#| eval: true
#| echo: false

# build a sqlalchemy engine string
engine_uri = f"mysql+pymysql://{config['user']}:{config['password']}@{config['host']}/{config['database']}"

# create a database connection.  THIS IS THE ACTUAL CONNECTION!
try:
    cnx = create_engine(engine_uri)
except ArgumentError as e:
    print(f"create_engine: Argument Error: {e}")
    #sys.exit(1)
except NoSuchModuleError as e:
    print(f"create_engine: No Such Module Error: {e}")
    #sys.exit(1)
except Exception as e:
    print(f"create_engine: An error occurred: {e}")
    #sys.exit(1)
```
```{python}
#| echo: false
#| eval: true

# Do a quick test of the connection and trap the errors better!
try:
    databases = pd.read_sql("show databases",cnx)
except ImportError as e:
    print(f"Error: {e}")
except OperationalError as e:
    print(f"Database/SQL Error:\n{str(e)}\n")
except ProgrammingError as e:
    print(f"Programming Error:\n{str(e)}\n")
except Exception as e:
    print(f"An error occurred:\n{str(e)}\n")

```

## Overview and description

This database project involves creating my own database with tables like **people**, **skills**, **roles**, **peopleskills**, and **peopleroles**. The 'people', 'skills', and 'roles' tables have specific columns and data in rows. 'Peopleroles' and 'peopleskills' reference data from the 'people', 'skills', and 'roles' tables. The project also includes practicing with writing various SQL queries, such as SELECT, FROM, INSERT INTO, etc., and working with SQL data types.

## Crows-foot diagram

In the ER diagram below, 

The relationship between SKILLS and PEOPLESKILLS is one-to-many relationship. It indicates that a skill in the SKILLS table can be associated with zero or many records in the PEOPLESKILLS table, while each record in the PEOPLESKILLS table corresponds to one SKILLS record. Same goes for PEOPLE and PEOPLESKILLS relationship. 

There is a one-to-many relationship between the PEOPLE and PEOPLEROLES entities and ROLES and PEOPLEROLES entities. These relationships indicate that each person in the PEOPLE entity can have multiple roles in the PEOPLEROLES entity, and each role in the ROLES entity can be assigned to multiple people in the PEOPLEROLES entity.

```{mermaid}
%%| echo: false
erDiagram
PEOPLE |o--|{ PEOPLESKILLS : P-PS
SKILLS |o--|{  PEOPLESKILLS : S-PS
PEOPLE ||--o{ PEOPLEROLES : P-PR
ROLES ||--o{ PEOPLEROLES : S-PR

PEOPLE{
    int people_id PK
    varchar first_name
    varchar last_name
    varchar email
    varchar linkedin_url
    varchar headshot_url
    varchar discord_handle
    varchar brief_bio
    date date_joined
}

SKILLS{
    int skills_id PK
    varchar name
    varchar description
    varchar tag
    varchar url
    int time_commitment
}

ROLES{
    int roles_id PK
    varchar name
    int sort_priority
}

PEOPLEROLES{
    int id PK
    int people_id FK
    int roles_id FK
    date date_assigned
}

PEOPLESKILLS{
    int id PK
    int people_id FK
    int skills_id FK
    date date_acquired
}
```

## Examples of data in the database

### People table

The *people* table contains elements that provide detailed information about a person, including specific details such as Discord handle and date joined. It includes columns such as id (PK), first name, last name, email address, LinkedIn URL, headshot URL, Discord handle, brief biography, and date joined.

Below is a list of data in the *people* table.

```{python}
#| echo: false
#| eval: true
sql = f"""
select * from people;
"""
## Add code to list roles table here
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df
```

### Skills table

The *skills* table contains elements describing a skill, with columns including id (PK), name, description, tag, URL, and time commitment. The id, name, and description are straightforward. The skill tag groups skills based on categories. The skill URL includes information about certification, and the time commitment column indicates how much time must be spent to gain a certain skill.

Below is a list of data in the *skills* table.

```{python}
#| echo: false
#| eval: true
sql = f"""
select * from skills;
"""
## Add code to list roles table here
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df
```

### Roles table

The *roles* table contains elements describing roles in a tech company, with columns including id (PK), name, and sort priority. The sort priority column is used to arrange roles in a specific order.

Below is a list of data in the *roles* table.

```{python}
#| echo: false
#| eval: true
sql = f"""
select * from roles;
"""
## Add code to list roles table here
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df
```


## Sample queries

Let's explore the database!

# List skill names, tags, and descriptions ordered by name

(here a sample query)

```{python}
sql = f"""
SELECT
    name,
    description,
    tag
FROM
    skills
ORDER BY
    name
"""
```


(and here is a sample result from the query)

```{python}
#| echo: false
#| eval: true
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df

```


### List people names and email addresses ordered by last_name

```{python}
sql = f"""
SELECT
    first_name,
    last_name,
    email
FROM
    people
ORDER BY
    last_name
"""
```

(and here is a sample result from the query)

```{python}
#| echo: false
#| eval: true
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df

```


### List skill names of Person 1

```{python}
sql = f"""
SELECT
    s.name AS skill_name
FROM
    people p
    INNER JOIN peopleskills ps ON (p.people_id = ps.people_id)
    INNER JOIN skills s ON (ps.skills_id = s.skills_id)
WHERE
    p.people_id = 1
"""
```

(and here is a sample result from the query)

```{python}
#| echo: false
#| eval: true
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df

```

### List people names with Skill 6

```{python}
sql = f"""
SELECT
    f.first_name,
    b.last_name,
    c.name AS skill_name,
    c.tag AS skill_tag
FROM
    peopleskills a
    INNER JOIN people f ON (a.people_id = f.people_id)
    INNER JOIN people b ON (a.people_id = b.people_id)
    INNER JOIN skills c ON (a.skills_id = c.skills_id)
WHERE
    a.skills_id = 6
"""
```

(and here is a sample result from the query)

```{python}
#| echo: false
#| eval: true
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df

```

### List people with a DEVELOPER role

```{python}
sql = f"""
SELECT
    p.last_name,
    r.name AS role_name
FROM
    peopleroles pr
    INNER JOIN people p ON (pr.people_id = p.people_id)
    INNER JOIN roles r ON (pr.roles_id = r.roles_id)
WHERE
    r.name = 'Developer'
"""
```

(and here is a sample result from the query)

```{python}
#| echo: false
#| eval: true
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df

```


### List names and email addresses of people without skills

```{python}
sql = f"""
SELECT
    p.last_name,
    p.email
FROM
    people p
LEFT JOIN
    peopleskills ps ON (p.people_id = ps.people_id)
WHERE
    ps.people_id IS NULL
"""
```

(and here is a sample result from the query)

```{python}
#| echo: false
#| eval: true
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df

```

### List names and tags of unused skills

```{python}
sql = f"""
SELECT
    s.name,
    s.tag
FROM
    skills s
LEFT JOIN
    peopleskills ps ON (s.skills_id = ps.skills_id)
WHERE
    ps.skills_id IS NULL
"""
```

(and here is a sample result from the query)

```{python}
#| echo: false
#| eval: true
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df

```


### List people names and skill names with the BOSS role

```{python}
sql = f"""
SELECT
    b.last_name AS people_last_name,
    c.name AS skill_name,
    c.tag AS skill_tag
FROM
    peopleskills a
    INNER JOIN people b ON (a.people_id = b.people_id)
    INNER JOIN skills c ON (a.skills_id = c.skills_id)
    INNER JOIN peopleroles pr ON (b.people_id = pr.people_id)
    INNER JOIN roles r ON (pr.roles_id = r.roles_id)
WHERE
    r.name = 'Boss'
"""
```

(and here is a sample result from the query)

```{python}
#| echo: false
#| eval: true
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df

```


### List ids and names of unused roles

```{python}
sql = f"""
SELECT roles_id, name
FROM roles
WHERE roles_id NOT IN (
    SELECT DISTINCT roles_id
    FROM peopleroles
)
"""
```

(and here is a sample result from the query)

```{python}
#| echo: false
#| eval: true
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df

```

## Reflection


The assignment was not as hard as I expected. It started tough, but creating tables and inserting data became fun as I worked through each part. It allowed me to be creative and think through my actions instead of just writing code mindlessly. Although it was a bit tedious and confusing, once the database was done, the work got much easier. Writing queries was the most challenging part for me, and I need more practice. Creativity also took the most of my time, apart from writing queries. Queries were super confusing when we go deeper into getting data from multiple tables. I need more practice writing these kinds of queries.